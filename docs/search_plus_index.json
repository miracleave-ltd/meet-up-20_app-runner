{"./":{"url":"./","title":"はじめに","keywords":"","body":"面倒臭いことはもうしない！AWS App RunnerでWebアプリを爆速でデプロイ！ 事前準備 Dockerのインストール AWSアカウント 今回の流れ App Runnerを活用して、アプリケーションを実際にデプロイしてみます。 技術要素 AWS AppRunner Amazon Elastic Container Registry: ECR Docker Node.js p5.js jest 開発手順 p5.jsのアプリを「git fork」し、ローカルにアプリを配置する ローカル環境でP5.jsのアプリを動かしてみる AWSにログインしECRのリポジトリを作成する Dockerイメージの作成 ECRにDockerイメージをpushする AWSのApp Runnerの画面に移動し、App Runnerの設定、デプロイを行う デプロイが完了後、App Runnerの画面にURLがあるのでアクセスし、アプリが動いているかを確認する "},"Section1.html":{"url":"Section1.html","title":"セクション１","keywords":"","body":"Section1 やってみよう！ . P5.jsのアプリを「Git clone」し、ローカルにアプリを配置する -1 Githubのリポジトリにアクセスする URL:https://github.com/miracleave-ltd/meet-up-20_app-runner -2 リポジトリをコピーする（Forkボタンを押下する） ※Forkボタンをクリック後、Githubにログインしている方は自動で自分のリポジトリに遷移します。 -3 リポジトリをローカルに配置する 自分のリポジトリにコピーされたアプリのURLをコピーする ターミナルに移動し、git cloneを行う 例：Desktopにクローンする場合 ~ $ cd ~/Desktop ~/Desktop $ git clone [コピーしたURL] . ローカル環境でP5.jsのアプリを動かしてみる -1 イメージの作成 # meet-up-20_app-runnerフォルダに移動 ~/Desktop $ cd meet-up-20_app-runner # Dockerイメージの作成 ~/Desktop/meet-up-20_app-runner $ docker build . -t app-runner-example -2 コンテナの作成、起動 ~/Desktop/meet-up-20_app-runner $ docker run -p 3333:3333 -d app-runner-example -3 アプリが動いているかを確認 http://localhost:3333 ※実際に動いていれば下記の画面が表示されます。 . AWSにログインしECRのリポジトリを作成する -1 ECRの画面に移動し、リポジトリを作成ボタンをクリックする 検索欄から「ECR」と検索 -2 ECRの設定を行い、リポジトリを作成する . ローカルからECRにpushするためのIAM Userを作成 注意：すでに「AdministratorAccess」権限を持ち、プログラムのアクセスの権限のあるユーザーを作成されている場合は、このスッテプを飛ばしてください。 -1 IAMの画面に移動し、左メニューからポリシーを選択し、ポリシーを作成ボタンをクリックする -2 JSONを選択、下記をコピーし貼り付ける { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"ecr:*\" ], \"Resource\": \"*\" } ] } -3 タグは設定せず、次のスッテプボタンをクリックし、ポリシー名を設定して作成する 名前： AccessEcrForAppRunner -4 左メニューからユーザーを選択し、ユーザーを追加ボタンをクリックする -5 IAMユーザーを作成する ユーザー名： meet-up-app-runner-user プログラムによるアクセスにチェック 既存のポリシーを直接アタッチを選択し、「AccessEcrForAppRunner」にチェックを入れ、確認画面までスキップする 確認画面でCSVをダウンロードする . ECRにDockerイメージをpushする -1 認証情報の設定 credentialsの設定 # .awsに移動 ~/Desktop/meet-up-20_app-runner $ cd ~/.aws # credentialsを作成、修正 .aws $ vi credentials 先ほど、CSVでダウンロードしたアクセスIDとアクセスキーを下記のイコールの後に値を設定する [default] aws_access_key_id = aws_secret_access_key = ※設定後は esc -> :wp -> Enter の順番でキーボードを打ち、保存する configの設定 .aws $ vi config 下記の形式で設定する [default] region = ap-northeast-1 output = json ※設定後は esc -> :wp -> Enter の順番でキーボードを打ち、保存する -2 ECR画面に移動し、プッシュコマンドを確認し、ECRにpushする 今回はAWS CLIをローカルにダウンロードせず、Dockerを通してAWS　CLIコマンドを実行します。 Dockerを通してAWS CLIコマンドを実行する際は下記コマンドをベースに実行します docker run --rm -ti -v ~/.aws:/root/.aws -v $(pwd):/aws amazon/aws-cli [AWSコマンド] プッシュコマンドを確認 ECRにプッシュする # クローンしてきたフォルダに移動 cd ~/Desktop/meet-up-20_app-runner # ログインする（ログインが成功すると「Login Succeeded」が表示される） docker run --rm -ti -v ~/.aws:/root/.aws -v $(pwd):/aws amazon/aws-cli [app-runner-exampleのプッシュコマンドの１をコピー（先頭のawsは省く）] 例：　docker run --rm -ti -v ~/.aws:/root/.aws -v $(pwd):/aws amazon/aws-cli ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin 0000000000.dkr.ecr.ap-northeast-1.amazonaws.com # app-runner-exampleのプッシュコマンドの3を実行 例： docker tag app-runner-example:latest 0000000000.dkr.ecr.ap-northeast-1.amazonaws.com/app-runner-example:latest # app-runner-exampleのプッシュコマンドの4を実行 例： docker push 0000000000.dkr.ecr.ap-northeast-1.amazonaws.com/app-runner-example:latest . AWSのApp Runnerの画面に移動し、App Runnerの設定、デプロイを行う -1 App Runnerの画面に移動し、App Runnerサービスを作成するボタンをクリック -2 App Runnerサービスの設定、デプロイを行う コンテナイメージのURIは、先ほど作成したECRリポジトリを選択する サービスを設定する 作成とデプロイボタンをクリック . デプロイが完了後、App Runner画面のURLにアクセスし、アプリが動いているかを確認する -1 公開されたURLにアクセスし、実際にアプリが動いているか確認する -2 アプリが問題なく動作している場合、下記の画面が表示されます "}}