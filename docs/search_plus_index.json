{"./":{"url":"./","title":"はじめに","keywords":"","body":"面倒臭いことはもうしない！AWS App RunnerでWebアプリを爆速でデプロイ！ 事前準備 Dockerインストール GitHubアカウント AWSアカウント今回の流れ App Runnerを活用して、アプリケーションを実際にデプロイします。技術要素 AWS AppRunner Amazon Elastic Container Registry: ECR Docker Node.js p5.js jest開発手順 デモアプリクローン デモアプリ動作確認 コンテナレジストリパターン ECRリポジトリ作成 Dockerイメージ作成 ECRプッシュ ソースコードリポジトリパターン ... AppRunnerデプロイ ゴミ掃除 注意事項 App Runnerでは、まだ制限が多くあります。利用する際は、事前に制限内容を確認の上、検討をお願いします。ご参考までにロードマップ等ご確認ください。App Runner - ロードマップ "},"Section1.html":{"url":"Section1.html","title":"1. デモアプリクローン","keywords":"","body":"デモアプリクローン Githubリポジトリ表示 次のリンクよりデモアプリがあるGitHubリポジトリにアクセスします。URL:https://github.com/miracleave-ltd/meet-up-20_app-runner リポジトリコピー Forkボタンをクリックします。※Forkボタンをクリック後、Githubにログインしている方は自動で自分のリポジトリに遷移します。 クローン用URL取得 自分のリポジトリにコピーされたアプリのURLをコピーします。 アプリクローン 以下の操作を行い、GitHubよりアプリを取得します。 例：Desktopにクローンする場合 ~ $ cd ~/Desktop ~/Desktop $ git clone [コピーしたURL] "},"Section2.html":{"url":"Section2.html","title":"2. アプリ動作確認","keywords":"","body":"デモアプリ動作確認 イメージ作成 # meet-up-20_app-runnerフォルダに移動 ~/Desktop $ cd meet-up-20_app-runner # Dockerイメージの作成 ~/Desktop/meet-up-20_app-runner $ docker build . -t app-runner-example コンテナの作成、起動 ~/Desktop/meet-up-20_app-runner $ docker run -p 3333:3333 -d app-runner-example アプリ確認 次のリンクよりデモアプリが動作しているか確認します。URL: http://localhost:3333※実際に動いていれば下記の画面が表示されます。 "},"Section7.html":{"url":"Section7.html","title":"5. ゴミ掃除","keywords":"","body":"ゴミ掃除 次のリンクよりApp Runnerサービス一覧画面を表示します。App Runnerサービス一覧 画面に表示されている指示通り、入力欄にdeleteを入力し、削除ボタンをクリックします。 本日作成したサービスが削除されていることを確認します。 以上。 "},"Section3.html":{"url":"Section3.html","title":"3. コンテナレジストリパターン","keywords":"","body":"コンテナレジストリパターン 今回はコンテナレジストリにECRを利用します。 ECRリポジトリ作成 AWSにログインし、検索欄から「ECR」と検索します。リポジトリを作成ボタンをクリックします。 リポジトリ名にapp-runner-exampleと入力します。 ECR用IAM User作成 ローカルからECRにpushするためのIAM Userを作成します。注意：すでに「AdministratorAccess」権限を持ち、プログラムのアクセスの権限のあるユーザーを作成されている場合は、このステップを飛ばしてください。 ECR用ポリシー作成 IAMの画面に移動し、左メニューからポリシーを選択し、ポリシーを作成ボタンをクリックします。 JSONを選択、下記をコピーし貼り付けてください。 { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"ecr:*\" ], \"Resource\": \"*\" } ] } 貼り付け後、次のステップ：タグボタンをクリックします。 次の設定値を入力し、ポリシーの作成ボタンをクリックし、ポリシーを作成します。 名前： AccessEcrForAppRunner IAM User作成 左メニューからユーザーを選択し、ユーザーを追加ボタンをクリックします。 次の設定値を入力し、次のステップ：アクセス制限ボタンをクリックします。 ユーザー名： meet-up-app-runner-userアクセスの種類： プログラムによるアクセスにチェックします。 既存のポリシーを直接アタッチを選択し、「AccessEcrForAppRunner」にチェックを入れ、確認画面までスキップします。 確認画面で.csvのダウンロードボタンをクリックし、IAM Userの認証情報が記載されているCSVをダウンロードします。 Dockerイメージプッシュ AWS認証情報の設定 aws-cliを利用して、ECRにイメージをプッシュします。それに伴い、credentialsの設定を行います。 # .awsに移動 ~/Desktop/meet-up-20_app-runner $ cd ~/.aws # credentialsを作成、修正 .aws $ vi credentials 先ほど、CSVでダウンロードしたIAM Userの認証情報(アクセスID,アクセスキー)を次のイコールの後に値を設定します。 [default] aws_access_key_id = aws_secret_access_key = ※設定後は esc -> :wp -> Enter の順番でキーボードを打ち、保存してください。 configの設定をします。 .aws $ vi config 次の形式で設定します。 [default] region = ap-northeast-1 output = json ※設定後は esc -> :wp -> Enter の順番でキーボードを打ち、保存してください。 ECR画面に移動し、プッシュコマンドを確認し、ECRにpushします。今回はAWS CLIをローカルにダウンロードせず、Dockerを通してAWS　CLIコマンドを実行します。Dockerを通してAWS CLIコマンドを実行する際は下記コマンドをベースに実行します。 docker run --rm -ti -v ~/.aws:/root/.aws -v $(pwd):/aws amazon/aws-cli [AWSコマンド] プッシュコマンドを確認します。 ECRイメージプッシュ # クローンしてきたフォルダに移動 cd ~/Desktop/meet-up-20_app-runner # ログインする（ログインが成功すると「Login Succeeded」が表示される） docker run --rm -ti -v ~/.aws:/root/.aws -v $(pwd):/aws amazon/aws-cli [app-runner-exampleのプッシュコマンドの１をコピー（先頭のawsは省く）] 例：　docker run --rm -ti -v ~/.aws:/root/.aws -v $(pwd):/aws amazon/aws-cli ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin 0000000000.dkr.ecr.ap-northeast-1.amazonaws.com # app-runner-exampleのプッシュコマンドの3を実行 例： docker tag app-runner-example:latest 0000000000.dkr.ecr.ap-northeast-1.amazonaws.com/app-runner-example:latest # app-runner-exampleのプッシュコマンドの4を実行 例： docker push 0000000000.dkr.ecr.ap-northeast-1.amazonaws.com/app-runner-example:latest AppRunner作成 App Runnerの画面に移動 App Runnerサービスを作成するボタンをクリック App Runnerサービスの設定、デプロイを行う コンテナイメージのURIは、先ほど作成したECRリポジトリを選択する サービスを設定する 作成とデプロイボタンをクリック デプロイ内容確認 デプロイが完了後、App Runner画面の公開されたURLにアクセスし、アプリが動いているかを確認 アプリが問題なく動作している場合、下記の画面が表示されます。 "},"Section5.html":{"url":"Section5.html","title":"4. ソースコードリポジトリパターン","keywords":"","body":"ソースコードリポジトリパターン 注意事項 ソースコードリポジトリは、GitHubのみ対応しています。 サービスランタイムは、Python3 / Nodejs 12のみとなります。 次のリンクよりApp Runnerページへ遷移します。 App Runner App Runnerサービスを作成ボタンをクリックします。ソースコードリポジトリを選択します。GitHubとAWSを連携させるため、新規追加ボタンをクリックします。「AWS Connector for GitHub」というアプリをGitHubアカウントにインストールするための同意画面が表示されます。Authorize AWS Connector for GitHubボタンをクリックします。別のアプリケーションをインストールするをクリックします。「AWS Connector for GitHub」をインストールするGitHubアカウントを選択してください。「AWS Connector for GitHub」をインストールするリポジトリを選択してください。選択したリポジトリが次のように「XXXXX/meet-up-20_app-runner」となっていることを確認し、installボタンをクリックしてください。パスワード入力画面が表示した場合は、パスワードを入力し、Confirm passwordボタンをクリックしてください。GitHubアプリケーションのセレクトボックスに対象GitHubアカウント名が表示されましたら、次へボタンをクリックしてください。以下の設定値を選択し、次へボタンをクリックしてください。 GitHubに接続：meetup-example リポジトリ：meet-up-20_app-runner ブランチ：main デプロイトリガー：自動 次の設定値を入力し、次へボタンをクリックしてください。 設定ファイル：ここですべての設定を構成する ランタイム：Nodejs 12 構築コマンド：npm install 開始コマンド：node index.js ポート：3000 次の設定値を入力し、次へボタンをクリックしてください。 サービス名：meetup-app-runner 仮想CPU：1 vCPU メモリ：2 GB 内容の確認を行い、特に問題がなければ、作成とデプロイボタンをクリックします。 ステータスがRunningになると環境作成完了です。ドメインが発行されますので、デフォルトドメインのURLをクリックします。 次のページが表示されれば、デプロイ完了です。 "}}