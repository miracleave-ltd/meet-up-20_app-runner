{"./":{"url":"./","title":"はじめに","keywords":"","body":"面倒臭いことはもうしない！AWS App RunnerでWebアプリを爆速でデプロイ！ 事前準備 Dockerインストール GitHubアカウント AWSアカウント 今回の流れ App Runnerを活用して、アプリケーションを実際にデプロイします。 大きな流れとしては、次の2パターンを実施します。 コンテナレジストリパターン ソースコードリポジトリパターン 技術要素 AWS AppRunner Amazon Elastic Container Registry: ECR Docker Node.js p5.js 手順 全体手順としては次の流れで進めます。 ①デモアプリクローン ②③④デモアプリ動作確認 ⑤⑥⑦⑧⑨コンテナレジストリパターン(Amazon ECRパターン) ⑩⑪⑫⑬ソースコードリポジトリパターン(GitHubパターン) ゴミ掃除 注意事項 App Runnerでは、まだ制限が多くあります。利用する際は、事前に制限内容を確認の上、検討をお願いします。ご参考までにロードマップ等ご確認ください。App Runner - ロードマップ 今回は次のCodeDeploy等を利用したパターンは実施しません。 Windows/Macの方向けに作成しております。コマンドラインツールは、個々の利用しているもので良いのですが、今回の手順は次のものを利用します。 Windows：コマンドプロンプト Mac：ターミナル "},"Section1.html":{"url":"Section1.html","title":"1. デモアプリクローン","keywords":"","body":"デモアプリクローン この手順では次の手順を進めていきます。 Githubリポジトリ表示 次のリンクよりデモアプリがあるGitHubリポジトリにアクセスします。URL:https://github.com/miracleave-ltd/meet-up-20_app-runner リポジトリコピー Forkボタンをクリックします。※Forkボタンをクリック後、Githubにログインしている方は自動で自分のリポジトリに遷移します。 クローン用URL取得 自分のリポジトリにコピーされたアプリのURLをコピーします。 アプリクローン 以下の操作を行い、GitHubよりアプリを取得します。 例：Desktopにクローンする場合(Windowsの型はスキップしてください。) cd ~/Desktop アプリをクローンします。GitHubよりコピーしたURLを使用してください。 git clone [コピーしたURL] 最終行にdone.が表示されれば、完了です。 Cloning into 'meet-up-20_app-runner'...remote: Enumerating objects: 363, done.remote: Counting objects: 100% (363/363), done.remote: Compressing objects: 100% (289/289), done.remote: Total 363 (delta 78), reused 329 (delta 54), pack-reused 0Receiving objects: 100% (363/363), 8.38 MiB | 24.38 MiB/s, done.Resolving deltas: 100% (78/78), done. "},"Section2.html":{"url":"Section2.html","title":"2. アプリ動作確認","keywords":"","body":"デモアプリ動作確認 この手順では次の手順を進めていきます。 イメージ作成 meet-up-20_app-runnerフォルダに移動します。 cd meet-up-20_app-runner Dockerイメージのビルドします。 docker build . -t app-runner-example コンテナの作成、起動 次のコマンドを実行し、ローカル環境でビルドしたイメージを実行します。 docker run -p 3333:3333 -d app-runner-example アプリ確認 次のリンクよりデモアプリが動作しているか確認します。URL: http://localhost:3333※実際に動いていれば下記の画面が表示されます。 "},"Section7.html":{"url":"Section7.html","title":"5. ゴミ掃除","keywords":"","body":"ゴミ掃除 App Runnerサービス削除 次のリンクよりApp Runnerサービス一覧を表示します。App Runnerサービス一覧 画面に表示されている指示通り、入力欄にdeleteを入力し、削除ボタンをクリックします。 本日作成したサービスが削除されていることを確認します。 IAM削除 IAMユーザー削除 次のリンクよりIAMユーザー一覧を表示します。IAMユーザー 今回作成したユーザーを選択し、削除ボタンをクリックします。 画面に表示されている指示通り、入力欄にmeet-up-app-runner-userを入力し、削除ボタンをクリックします。 対象のユーザーが削除されていることを確認します。 IAMポリシー削除 次のリンクよりIAMポリシー一覧を表示します。IAMポリシー 作成したIAMポリシーを選択し、アクションボタンのドロップダウンより削除ボタンをクリックします。 画面に表示されている指示通り、入力欄にAccessEcrForAppRunnerを入力し、削除ボタンをクリックします。 検索欄にAccessEcrForAppRunnerを入力し、対象のポリシーが削除されていることを確認します。 ローカルに構築したDockerイメージ削除 次のコマンドを実行し、コンテナ状態を確認します。 docker ps --- CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES e572bd192f8d app-runner-example \"docker-entrypoint.s…\" 00 seconds ago Up 00 seconds 0.0.0.0:3333->3333/tcp, :::3333->3333/tcp nice_kare 上記で実行したCONTAINER IDを次のコマンドで利用します。起動中のコンテナを停止します。 docker stop [CONTAINER ID] ビルドして作成したコンテナイメージを削除します。 docker rmi -f app-runner-example 次のメッセージが表示されれば、成功です。 Untagged: 000000.dkr.ecr.ap-northeast-1.amazonaws.com/app-runner-example... ECRにプッシュしたイメージを削除します。コンテナ名は次の手順で利用した000000000000.dkr.ecr.ap-northeast-1.amazonaws.com/app-runner-exampleを入力してください。 docker rmi -f [コンテナ名] 次のメッセージが表示されれば、成功です。 Untagged: 000000.dkr.ecr.ap-northeast-1.amazonaws.com/app-runner-example...Deleted: sha256:f382b74e... フォルダの削除 次のコマンドでフォルダを完全に削除します。 Macの場合 # 一つ上の階層に移動 cd ../ # meet-up-20_app-runnerフォルダが存在しているかを確認 ls # meet-up-20_app-runnerフォルダが存在している場合、下記コマンドを実行しフォルダを削除 rm -rf meet-up-20_app-runner Windowsの場合 # 一つ上の階層に移動 cd ../ # meet-up-20_app-runnerフォルダが存在しているかを確認 dir # meet-up-20_app-runnerフォルダが存在している場合、下記コマンドを実行しフォルダを削除 rd /s /q meet-up-20_app-runner 以上。 "},"Section3.html":{"url":"Section3.html","title":"3. コンテナレジストリパターン","keywords":"","body":"コンテナレジストリパターン この手順では序盤について、次の手順を進めていきます。 今回はコンテナレジストリにECRを利用します。 ECRリポジトリ作成 AWSにログインし、検索欄から「ECR」と検索します。※次のリンクでも表示します。　Amazon ECR Repositoriesリポジトリを作成ボタンをクリックします。 リポジトリ名にapp-runner-exampleと入力します。 ECR用IAM User作成 ローカルからECRにpushするためのIAM Userを作成します。注意：すでに「AdministratorAccess」権限を持ち、プログラムのアクセスの権限のあるユーザーを作成されている場合は、このステップを飛ばしてください。 ECR用ポリシー作成 IAMの画面に移動し、左メニューからポリシーを選択し、ポリシーを作成ボタンをクリックします。 JSONを選択、下記をコピーし貼り付けてください。 { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"ecr:*\" ], \"Resource\": \"*\" } ] } 貼り付け後、次のステップ：タグボタンをクリックします。 タグの設定は不要です。次のステップ：確認ボタンをクリックします。次の設定値を入力し、ポリシーの作成ボタンをクリックし、ポリシーを作成します。 名前： AccessEcrForAppRunner IAM User作成 左メニューからユーザーを選択し、ユーザーを追加ボタンをクリックします。 次の設定値を入力し、次のステップ：アクセス制限ボタンをクリックします。 ユーザー名： meet-up-app-runner-userアクセスの種類： プログラムによるアクセスにチェックします。 既存のポリシーを直接アタッチを選択し、「AccessEcrForAppRunner」にチェックを入れ、確認画面までスキップします。 確認画面で.csvのダウンロードボタンをクリックし、IAM Userの認証情報が記載されているCSVをダウンロードします。 Dockerイメージプッシュ AWS認証情報の設定 aws-cliを利用して、ECRにイメージをプッシュします。それに伴い、credentialsの設定を行います。 # awsフォルダを作成 mkdir aws 先ほど、CSVでダウンロードしたIAM Userの認証情報(アクセスID,アクセスキー)を次のイコールの後に値を設定します。 Macの場合 cat aws/credentials [default] aws_access_key_id = [Access key ID] aws_secret_access_key = [Secret access key] EOF Windowsの場合 ( echo [default] echo aws_access_key_id = [Access key ID] echo aws_secret_access_key = [Secret access key] ) >> aws/credentials configの設定をします。Macの場合 cat aws/config [default] region = ap-northeast-1 output = json EOF Windowsの場合 ( echo [default] echo region = ap-northeast-1 echo output = json ) >> aws/config ECR画面に移動し、プッシュコマンドを確認し、ECRにpushします。今回はAWS CLIをローカルにダウンロードせず、Dockerを通してAWS CLIコマンドを実行します。 プッシュコマンドを確認します。後続のECRイメージプッシュ手順で利用します。 ECRイメージプッシュ AWS CLIでAWSにログインします。Macの場合例：docker run --rm -ti -v $(pwd)/aws:/root/.aws -v $(pwd):/aws amazon/aws-cli ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin 0000000000.dkr.ecr.ap-northeast-1.amazonaws.com docker run --rm -ti -v $(pwd)/aws:/root/.aws -v $(pwd):/aws amazon/aws-cli [app-runner-exampleのプッシュコマンドの１をコピー（先頭のawsは省く）] Windowsの場合例：docker run --rm -ti -v %cd%/aws:/root/.aws -v %cd%:/aws amazon/aws-cli ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin 0000000000.dkr.ecr.ap-northeast-1.amazonaws.com docker run --rm -ti -v %cd%/aws:/root/.aws -v %cd%:/aws amazon/aws-cli [app-runner-exampleのプッシュコマンドの１をコピー（先頭のawsは省く）] ログインが成功すると次のメッセージが表示されます。 Login Succeeded app-runner-exampleのプッシュコマンドの3を実行します。例：docker tag app-runner-example:latest 0000000000.dkr.ecr.ap-northeast-1.amazonaws.com/app-runner-example:latest app-runner-exampleのプッシュコマンドの4を実行します。例：docker push 0000000000.dkr.ecr.ap-northeast-1.amazonaws.com/app-runner-example:latestプッシュコマンドが成功すると、次のメッセージが表示されます。 The push refers to repository [0000000000.dkr.ecr.ap-northeast-1.amazonaws.com/app-runner-example]00000d76f0b8: Pushed00000cbf4ab0: Layer already exists...latest: digest: sha256:97c0000000000... size: 3051 App Runnerデプロイ AWSのApp Runnerの画面に移動し、App Runnerの設定、デプロイを行います。以降の手順では次の手順を進めていきます。 AppRunner作成 App Runnerの画面に移動します。 ※次のリンクでも表示します。　AWS App Runner App Runnerサービスを作成するボタンをクリックします。 App Runnerサービスの設定、デプロイを行行います。 コンテナイメージのURIは、先ほど作成したECRリポジトリを選択します。 サービスを設定します。 作成とデプロイボタンをクリックします。 デプロイ内容確認 デプロイが完了後、App Runner画面の公開されたURLにアクセスし、アプリが動いているかを確認します。 アプリが問題なく動作している場合、下記の画面が表示されます。 "},"Section5.html":{"url":"Section5.html","title":"4. ソースコードリポジトリパターン","keywords":"","body":"ソースコードリポジトリパターン この手順では次の手順を進めていきます。 注意事項 ソースコードリポジトリは、GitHubのみ対応しています。 サービスランタイムは、Python3 / Nodejs 12のみとなります。 次のリンクよりApp Runnerページへ遷移します。App Runner App Runnerサービスを作成ボタンをクリックします。ソースコードリポジトリを選択します。GitHubとAWSを連携させるため、新規追加ボタンをクリックします。「AWS Connector for GitHub」というアプリをGitHubアカウントにインストールするための同意画面が表示されます。Authorize AWS Connector for GitHubボタンをクリックします。別のアプリケーションをインストールするをクリックします。「AWS Connector for GitHub」をインストールするGitHubアカウントを選択してください。「AWS Connector for GitHub」をインストールするリポジトリを選択してください。選択したリポジトリが次のように「XXXXX/meet-up-20_app-runner」となっていることを確認し、installボタンをクリックしてください。パスワード入力画面が表示した場合は、パスワードを入力し、Confirm passwordボタンをクリックしてください。GitHubアプリケーションのセレクトボックスに対象GitHubアカウント名が表示されましたら、次へボタンをクリックしてください。以下の設定値を選択し、次へボタンをクリックしてください。 GitHubに接続：meetup-example リポジトリ：meet-up-20_app-runner ブランチ：main デプロイトリガー：自動 次の設定値を入力し、次へボタンをクリックしてください。 設定ファイル：ここですべての設定を構成する ランタイム：Nodejs 12 構築コマンド：npm install 開始コマンド：node index.js ポート：3333 次の設定値を入力し、次へボタンをクリックしてください。 サービス名：meetup-app-runner 仮想CPU：1 vCPU メモリ：2 GB 内容の確認を行い、特に問題がなければ、作成とデプロイボタンをクリックします。 ステータスがRunningになると環境作成完了です。ドメインが発行されますので、デフォルトドメインのURLをクリックします。 次のページが表示されれば、デプロイ完了です。 "}}